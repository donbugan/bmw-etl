services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - bmw-net

  kafka:
    image: bitnami/kafka:3.6
    container_name: bmw-etl-kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://bmw-etl-kafka-1:9092
      KAFKA_CREATE_TOPICS: "parts_topic:1:1"
    depends_on:
      - zookeeper
    networks:
      - bmw-net

  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: parts_admin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: carparts
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - bmw-net

  airflow-webserver:
    image: apache/airflow:2.7.1
    environment:
      AIRFLOW__CORE__EXECUTOR: "SequentialExecutor"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://parts_admin:secret@postgres/carparts"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/init-airflow.sh:/opt/airflow/init-airflow.sh
    depends_on:
      - postgres
    command: ["bash", "/opt/airflow/init-airflow.sh"]
    networks:
      - bmw-net

  airflow-scheduler:
    image: apache/airflow:2.7.1
    environment:
      AIRFLOW__CORE__EXECUTOR: "SequentialExecutor"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://parts_admin:secret@postgres/carparts"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/init-scheduler.sh:/opt/airflow/init-scheduler.sh
    depends_on:
      - postgres
    command: ["bash", "/opt/airflow/init-scheduler.sh"]
    networks:
      - bmw-net

  kafka-producer:
    build: ./docker/kafka
    depends_on:
      - kafka
    command: python producer.py
    restart: always
    networks:
      - bmw-net
    env_file:
      - ./docker/kafka/.env
  
  kafka-consumer:
    build: ./docker/kafka
    depends_on:
      - kafka
    command: python consumer.py
    restart: always
    networks:
      - bmw-net 
    env_file:
    - ./docker/kafka/.env

networks:
  bmw-net:
    driver: bridge
